plugins {
    id 'net.researchgate.release' version '2.3.0'
    id 'org.ajoberstar.github-pages' version '1.3.1'
}

apply from: 'build.gradle'

apply plugin: 'maven-publish'
apply plugin: 'java-library-distribution'
//apply plugin: com.jfrog.bintray.gradle.BintrayPlugin
//apply plugin: org.ajoberstar.gradle.git.ghpages.GithubPagesPlugin

ext {
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    vcsUrl =  "${githubUrl}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = ''
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
    if (!project.hasProperty("bintrayPassphrase")) {
        bintrayPassphrase = ''
    }
    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

distributions {
//    version = version - "-SNAPSHOT"
    main {
        contents {
            from ('.') { include '*.txt','build.gradle','src/**' }
            into ('lib') {
                from 'licenses'
            }
        }
    }
}

// 'gradle release' will also upload release to Nexus
createReleaseTag.dependsOn uploadArchives
createReleaseTag.dependsOn clean

publishGhPages.dependsOn test
publishGhPages.dependsOn javadoc

task publishDocs(dependsOn: ['publishGhPages'])

task publishSnapshot(dependsOn: ['test', 'publishMainPublicationToMavenRepository'])

task publishRelease(dependsOn: ['publishDocs', 'release'])

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from (sourceSets.test.allSource) {
        include 'test/**'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
    include 'test/**'
}

publishing {
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url "http://oss.jfrog.org/artifactory/simple/oss-snapshot-local/"
                credentials {
                    username bintrayUsername
                    password bintrayApiKey
                }
            }
        }        
    }
}

publishing {
    publications {
        main(MavenPublication) {
            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            artifact testJar {
                classifier "tests"
            }

            from components.java

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name project.name
                    description project.description
                    url 'http://www.concordion.org'
                    packaging 'jar'
                    inceptionYear '2008'

                    scm {
                        url vcsUrl
                        connection vcsConnection
                        developerConnection vcsConnection
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    issueManagement{
                        system 'GitHub Issues'
                        url issuesUrl
                    }

                    developers {
                        developer {
                            id 'peterson3'
                            name 'David Peterson'
                            roles { role 'Project Creator' }
                        }
                        developer {
                            id 'nigel.charman.nz'
                            name 'Nigel Charman'
                            roles  { role 'Project Lead' }
                        }
                        developer {
                            id 'drtimwright'
                            name 'Tim Wright'
                            roles  { role 'Developer' }
                        }
                        developer {
                            id 'jose.m.beas'
                            name 'Jose M Beas'
                            roles  { role 'Developer' }
                        }
                        developer {
                            id 'gmandnepr'
                            name 'Ievgen Degtiarenko'
                            roles  { role 'Developer' }
                        }
                        developer {
                            id 'habuma'
                            roles  { role 'Developer' }
                        }
                        developer {
                            id 'pinfieldharm'
                            roles  { role 'Developer' }
                        }
                        developer {
                            id 'wangyizhuo'
                            roles  { role 'Developer' }
                        }
                    }
                }
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

githubPages {
    repoUri = 'git@github.com:concordion/concordion.git'
//    deleteExistingFiles = false
    pages {
        from 'ghpages'
        
        into ('latest') {
            from ('build/reports/spec/concordion') {
                into 'spec'
            }
            
            from ('build/docs/javadoc/') {
                into 'javadoc'
            }
        }
    }  
}
